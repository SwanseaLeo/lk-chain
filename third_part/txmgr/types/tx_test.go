package types

import (
	"fmt"
	"math/big"
	"testing"

	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

func TestJsonHash(t *testing.T) {
	items := make(map[string]interface{})

	items["0x400cd9170185980ae8e6577668308b7881bfc374e78c7ae9af4f2421c98be7b3"] = []interface{}{
		common.HexToHash("0x90599455c3530c5ba085487dc64a34ec057f4740a82f370a52666df785ed2d02"),
		common.HexToAddress("0xea574bd68b9d930aaab4ef9f5c306e67fb26999a"),
		common.HexToAddress("0x16caeda0f71ece7241b469b88fed39f03a7ec9df"),
		big.NewInt(1000),
		int(2),
	}
	items["0xc14fce78d71710fb2f927f43bb26e07cfac94a15bdea09e3fde281efd6628f5f"] = []interface{}{
		common.HexToHash("0x90599455c3530c5ba085487dc64a34ec057f4740a82f370a52666df785ed2d02"),
		common.HexToAddress("0xea574bd68b9d930aaab4ef9f5c306e67fb26999a"),
		common.HexToAddress("0x16caeda0f71ece7241b469b88fed39f03a7ec9df"),
		big.NewInt(1000),
		common.HexToAddress("0x16caeda0f71ece7241b469b88fed39f03a7ec9df"),
		int(3),
	}

	for hashStr, v := range items {
		h := jsonHash(v)

		//t.Logf("hash=%s", h.String())
		if h.String() != hashStr {
			t.Fatalf("%s != %s", hashStr, h.String())
		}
	}
}

func TestFromEtherTx(t *testing.T) {
	txs := []string{"0x7b2274797065223a226f74222c227478223a227b5c22747970655c223a5c2272745c222c5c226574785c223a6e756c6c2c5c227274785c223a7b5c2274785f686173685c223a5c223078653533616134373664633665316433396261383031616338343864643830376338623165626364326339333233373462333134383637356137643635613565315c222c5c22746f5c223a5c223078653435313562356130306336363534656364633238313765393066633561363165663362333039335c222c5c2276616c75655c223a373837393630303030303030303030302c5c22626c6f636b5f6e756d5c223a6e756c6c7d2c5c226374785c223a6e756c6c2c5c22637274785c223a6e756c6c2c5c227374785c223a6e756c6c2c5c227369676e5c223a5c223078303161393238613137373130373664376362303162386663383661343237336661633838326237303064386432613134326435346338393662343864333130646264356139393633383466383030396264393435646466613339343562613464343834323662303831386131333938363831626234373964653965376230653030375c227d227d"}
	txs = append(txs, "0x7b2274797065223a226f74222c227478223a227b5c22747970655c223a5c2265745c222c5c226574785c223a7b5c2274785c223a7b5c226e6f6e63655c223a5c22307832315c222c5c2267617350726963655c223a5c223078313734383736653830305c222c5c226761735c223a5c22307831383661305c222c5c22746f5c223a5c223078646630393736323166333265366539626362393662396631633761373364313763346336633230315c222c5c2276616c75655c223a5c22307836345c222c5c22696e7075745c223a5c2230785c222c5c22765c223a5c223078656338645c222c5c22725c223a5c223078653933623333303134383235353235383235356439636334633765616132366537306361313461346530343564356664323731386363646439613339343632365c222c5c22735c223a5c223078356239666435636635636130656163623965306430653934336234316162653961613165343530323766633065366361346437653433623936366135323362315c222c5c22686173685c223a5c223078333564336566633863306362386539646465663363613530326362313262303035653232393436363165376637326564376334326361333866386362366461635c227d2c5c226761735f757365645c223a3130303030307d2c5c227274785c223a6e756c6c2c5c226374785c223a6e756c6c2c5c22637274785c223a6e756c6c2c5c227374785c223a6e756c6c2c5c227369676e5c223a5c223078303130623562306262616662323832643035383237376161353766633737306232663861396231383637373130653561383162623836636461383232663739616563303434336363383737623239623136353536393466646565666334633061313339633433623336333038656163613261626432626162356363626666323630345c227d227d")
	ethRawTx := "0x7b2274797065223a227478222c227478223a22307866383666383038353137343837366538303038333031383661303934646630393736323166333265366539626362393662396631633761373364313763346336633230313838386163373233303438396538303030303830383265633865613039373265663662646264383936383261653138633130373963393132363066363038653034616630376435323863383033376231636235356336633235306639613034663366363766663863653333353735313133613030653036376632643733373563636662323863383637366662326661636436313265633861616639663432227d"
	txs = append(txs, ethRawTx)
	ethRawTx = "0x7b2274797065223a227478222c227478223ad"
	txs = append(txs, ethRawTx)
	//	ethRawTx = "0x7b2274797065223a227478222c227478223ad"
	ethRawTx = "0x7b2274797065223a226f74222c227478223a227b5c22747970655c223a5c2265745c222c5c226574785c223a7b5c2274785c223a7b5c226e6f6e63655c223a5c22307835655c222c5c2267617350726963655c223a5c223078313734383736653830305c222c5c226761735c223a5c22307831383661305c222c5c22746f5c223a5c223078396230343061353837343839663037333730363866613336333932643636646634393866636163665c222c5c2276616c75655c223a5c2230786134626666366461336637373430305c222c5c22696e7075745c223a5c2230785c222c5c22765c223a5c223078656338655c222c5c22725c223a5c223078313733613462353961653433333261313139306135336435656437653162353766613865663337346339366431303732323737656433663865633433396436625c222c5c22735c223a5c223078353434313339333866343735623963666632343738316565346565376637626564363237316131663332343466336133336461643632363565613530323133355c222c5c22686173685c223a5c223078646631663061633138653166663362356531306132373735663436306337393435323339643330313430353330643463373161333334326434626437386530655c227d2c5c226761735f757365645c223a3130303030307d2c5c227274785c223a6e756c6c2c5c226374785c223a6e756c6c2c5c22637274785c223a6e756c6c2c5c227374785c223a6e756c6c2c5c227369676e5c223a5c223078303165373535303737366333393264646137616436303765643565396131633234313135343738383735333634383034343064346133633532633133656435343435633738636432333031636132363061343535343931316637663263653330353566313535613533663662613739386665633761303434653835376539336330335c227d227d"
	txs = append(txs, ethRawTx)
	pubs := []string{"01DE4E4EAEB4C1D456E7EEE308AD93682A44FEDF855766C327168FB28B6E4FC80F"}
	pubs = append(pubs, "01FFF63397E01C04B749E551953D141304B7F8AAEF235E40F6A5387837E3626CBD")
	pubkey := "01920345FB7343AECA9482FD528E6673DB9F5437CEA9B13E61066FBCEC49E42332" //0123B5B22EA1CBE1DC595B62D005A624E097EA55F9C8E0889D40E60F1AFBCBA580
	pubs = append(pubs, "", "", "", pubkey)
	exptectedResults := []bool{false, true, false, false, false, true}

	for i, tx := range txs {
		lkx, err := FromEtherTx(tx)
		if err != nil || lkx == nil {
			t.Errorf("FromEtherTx: %v", err)
		}

		switch lkx.Type {
		case EthTxType:
			fmt.Printf("type=%s, sign=%s, etx=%v\n", lkx.Type, lkx.Sign, lkx.ETx)
		case ContractTxType:
			fmt.Printf("type=%s, sign=%s, ctx=%v\n", lkx.Type, lkx.Sign, lkx.CTx)
		case SuicideTxType:
			fmt.Printf("type=%s, sign=%s, stx=%v\n", lkx.Type, lkx.Sign, lkx.STx)
		case LKRawTxType:
			fmt.Printf("type=%s, sign=%s, etx=%v\n", lkx.Type, lkx.Sign, lkx.ETx)
		default:
			fmt.Printf("unknown type, type=%s", lkx.Type)
		}

		if err := CheckTxSign(lkx, pubs[i]); (err == nil) != exptectedResults[i] {
			fmt.Printf("CheckTxSign: exptected sign %v, but got %v, err=%v\n", exptectedResults[i], (err == nil), err)
			t.Errorf("CheckTxSign: exptected sign %v, but got %v, err=%v", exptectedResults[i], (err == nil), err)
		}
	}

	var extension map[string]interface{}
	//var stringInput = "0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610608806100c16000396000f30060606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631df96db4146100dd57806327e235e3146101145780633ccc05221461016157806344af0a76146101ae57806348461b56146101e55780637d286e4814610227578063893d20e8146102555780638da5cb5b146102aa575b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550005b610112600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506102ff565b005b341561011f57600080fd5b61014b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103fb565b6040518082815260200191505060405180910390f35b341561016c57600080fd5b610198600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610413565b6040518082815260200191505060405180910390f35b6101e3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061045c565b005b34156101f057600080fd5b610225600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104ed565b005b610253600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061053e565b005b341561026057600080fd5b61026861058e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102b557600080fd5b6102bd6105b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561033f57600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f760293b115a13c658bed031ec1d4e7aaa0baa9193dec2741e73286b8016443c28282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60016020528060005260406000206000915090505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561049c57600080fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b34600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582098b3c163276602a1f4497e074423cf5f324750542a0f9061e862d26a52e0283c0029"
	var stringInput = "0x7b22736572766963655f6964223a342c22746f223a22307837653936656365363135666332383333343039373763383632646236646536303765363736613137222c227369676e223a223263393465653534386138613366323434663665383531343837373931386563222c2264657363223a22e59088e7baa6e689a7e8a18c2d74657374222c2274785f74797065223a22636f6e7472616374222c226761735f6c696d6974223a223930303030222c227072657061795f6964223a22323031383033313631393134353930303034303130313430373038363139343037373331222c2263616c6c6261636b223a22687474703a5c2f5c2f746573742d70726f78792e7061792e78756e6c65692e636f6d3a31343434345c2f6f6e655468696e67436f696e50617943616c6c6261636b222c2264617461223a223078343834363162353630303030303030303030303030303030303030303030303037653936656365363135666332383333343039373763383632646236646536303765363736613137222c2276616c7565223a223130303030303030303030222c226f726465725f6964223a223138303331393134333232303331383330323237222c226b6579223a226532613436333539393266353963663134663165376566393262616339383432227d"
	//input := bytes.NewBufferString(stringInput).Bytes()
	input, err := hexutil.Decode(stringInput)
	if err != nil {
		fmt.Printf("input: %s, err: %v", string(input), err)
	}
	if err := json.Unmarshal(input, &extension); err != nil {
		fmt.Printf("input: %s, err: %v", string(input), err)
	}

	fmt.Println("data", input)
	for key, val := range extension {
		fmt.Printf("%s: %v\n", key, val)
	}

}
